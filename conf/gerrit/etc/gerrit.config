[gerrit]
  basePath = git
	canonicalWebUrl = http://review.firmenessen.de
	serverId = c9d3d9be-b939-4ae0-8973-809ed97347cc

[index]
  type = LUCENE

[auth]
  type = ldap
  gitBasicAuth = true
	gitBasicAuthPolicy = HTTP

[ldap]
  server = ldap://ldap
  username = cn=admin,dc=example,dc=org
  accountBase = dc=example,dc=org
  accountPattern = (&(objectClass=person)(uid=${username}))
  accountFullName = displayName
  accountEmailAddress = mail
	groupBase = dc=example,dc=org

[sendemail]
  smtpServer = localhost

[sshd]
  listenAddress = *:29418

[plugin "webhooks"]
  connectionTimeout = 5000
  socketTimeout = 5000
  maxTries = 5
  retryInterval = 1000
  threadPoolSize = 2
  sslVerify = false

[httpd]
  listenUrl = http://*:8080/

[cache]
  directory = cache

[container]
	user = root
	javaOptions = "-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance"
	javaOptions = "-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance"
	javaHome = /usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el8_4.x86_64

[receive]
	enableSignedPush = false

[project]
	description = Access inherited by all other projects.
  
[receive]
	requireContributorAgreement = false
	requireSignedOffBy = false
	requireChangeId = true
	enableSignedPush = false

[submit]
	mergeContent = true

[access "refs/*"]
	read = group Administrators
	read = group Registered Users

[access "refs/for/*"]
	addPatchSet = group Registered Users
	addPatchSet = group Registered Users

[access "refs/for/refs/*"]
	push = group Registered Users
	pushMerge = group Registered Users

[access "refs/heads/*"]
	create = group Administrators
	create = group Project Owners
	create = group Registered Users
	editTopicName = +force group Administrators
	editTopicName = +force group Project Owners
	forgeAuthor = group Registered Users
	forgeCommitter = group Administrators
	forgeCommitter = group Project Owners
	forgeCommitter = group Registered Users
	label-Code-Review = -2..+2 group Administrators
	label-Code-Review = -2..+2 group Project Owners
	label-Code-Review = -2..-2 group Registered Users
	push = group Administrators
	push = group Project Owners
	push = group Registered Users
	read = group Registered Users
	revert = group Registered Users
	revert = group Registered Users
	submit = group Administrators
	submit = group Project Owners
	submit = group Registered Users

[access "refs/meta/config"]
	create = group Administrators
	create = group Project Owners
	create = group Registered Users
	label-Code-Review = -2..+2 group Administrators
	label-Code-Review = -2..+2 group Project Owners
	label-Code-Review = -2..+2 group Registered Users
	push = group Administrators
	push = group Project Owners
	push = group Registered Users
	read = group Administrators
	read = group Project Owners
	read = group Registered Users
	submit = group Administrators
	submit = group Project Owners
	submit = group Registered Users

[access "refs/meta/version"]
	read = group Registered Users

[access "refs/tags/*"]
	create = group Administrators
	create = group Project Owners
	create = group Registered Users
	createSignedTag = group Administrators
	createSignedTag = group Project Owners
	createSignedTag = group Registered Users
	createTag = group Administrators
	createTag = group Project Owners
	createTag = group Registered Users

[label "Code-Review"]
	function = MaxWithBlock
	defaultValue = 0
	copyMinScore = true
	copyAllScoresOnTrivialRebase = true
	value = -2 This shall not be merged
	value = -1 I would prefer this is not merged as is
	value = 0 No score
	value = +1 Looks good to me, but someone else must approve
	value = +2 Looks good to me, approved

[capability]
	administrateServer = group Administrators
	administrateServer = group Registered Users
	priority = batch group Registered Users
	priority = batch group Service Users
	streamEvents = group Registered Users
	streamEvents = group Service Users
